name: Java CI/CD Pipeline

on:
  push:
    branches: [ main, enhancement/ci, feature/test_automation ]
  pull_request:
    branches: [ main ]

env:
  POSTGRES_DB: testdb
  POSTGRES_USER: testuser
  POSTGRES_PASSWORD: test
  SPRING_PROFILES_ACTIVE: ci
  DISPLAY: :99

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: 'gradle'

    - name: Prepare execution environment
      run: |
        chmod +x gradlew
        sudo mkdir -p /usr/share/man/man1
        sudo apt-get update -y

    - name: Install Chrome and dependencies
      run: |
        # Install required libs for Chrome
        sudo apt-get update
        sudo apt-get install -y \
        wget \
        libx11-xcb1 \
        libxcomposite1 \
        libxcursor1 \
        libxdamage1 \
        libxi6 \
        libxtst6 \
        libnss3 \
        libcups2 \
        libxss1 \
        libxrandr2 \
        libasound2 \
        libatk1.0-0 \
        libgtk-3-0 \
        libgbm-dev

        # Install Chrome (stable)
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/googlechrome-linux-keyring.gpg
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/googlechrome-linux-keyring.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable

        # Install matching Chromedriver
        CHROME_VERSION=$(google-chrome-stable --version | awk '{print $3}')
        CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_${CHROME_VERSION%.*}")
        wget -q "https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip"
        sudo unzip chromedriver_linux64.zip -d /usr/local/bin
        sudo chmod +x /usr/local/bin/chromedriver
        rm chromedriver_linux64.zip || true

    - name: Verify installations
      run: |
        google-chrome-stable --version
        chromedriver --version
        javac -version

    - name: Build application
      run: ./gradlew clean build

    - name: Run unit tests
      run: ./gradlew test

    - name: Setup Docker environment
      run: |
        sudo apt-get install -y docker-compose-plugin
        sudo usermod -aG docker $USER
        newgrp docker

    - name: Build Docker image
      run: docker build -t beluga-asg:latest .

    - name: Start services
      run: docker compose -f docker-compose.yml up -d

    - name: Wait for services
      run: |
        echo "Waiting for all services..."
        docker compose -f docker-compose.yml ps
        timeout 60s bash -c 'while ! nc -z localhost 5432; do sleep 2; done'
        docker compose -f docker-compose.yml logs app

    - name: Run integration tests
      run: |
        Xvfb :99 -screen 0 1024x768x16 &
        ./gradlew integrationTest -Dspring.datasource.url=jdbc:postgresql://localhost:5432/${{ env.POSTGRES_DB }}

    - name: Push to Docker Hub
      if: github.ref == 'refs/heads/main'
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker tag beluga-asg:latest $DOCKER_USERNAME/beluga-asg:latest
        docker push $DOCKER_USERNAME/beluga-asg:latest

    - name: Cleanup
      if: always()
      run: |
        docker compose -f docker-compose.yml down -v
        docker rmi beluga-asg:latest || true
        docker system prune -af